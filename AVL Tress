#include <stdio.h>
#include <stdlib.h>
struct node {
int data;
struct node* left;
struct node* right;
int height; // Height of the node
};

int height(struct node* n) {
if (n == NULL)
return 0;
return n->height;
}

int max(int a, int b) {
return (a > b) ? a : b;
}

struct node* rightRotate(struct node* y) {
struct node* x = y->left;
struct node* T2 = x->right;

x->right = y;
y->left = T2;

y->height = max(height(y->left), height(y->right)) + 1;

x->height = max(height(x->left), height(x->right)) + 1;
return x;
}

struct node* leftRotate(struct node* x) {
struct node* y = x->right;
struct node* T2 = y->left;

y->left = x;
x->right = T2;

x->height = max(height(x->left), height(x->right)) + 1;
y->height = max(height(y->left), height(y->right)) + 1;

return y;
}

int getBalance(struct node* n) {
if (n == NULL)
return 0;
return height(n->left) - height(n->right);
}

struct node* insert(struct node* r, int ele) {
if (r == NULL)
{
struct node *newnode=(struct node*)malloc(sizeof(struct node));
newnode->data=ele;
newnode->left=NULL;
newnode->right=NULL;
newnode->height=1;
return newnode;
}
if (ele < r->data)
r->left = insert(r->left, ele);
else if (ele > r->data)
r->right = insert(r->right, ele);
else
return r;

r->height = 1 + max(height(r->left), height(r->right));

int balance = getBalance(r);

if (balance > 1 && ele < r->left->data)
return rightRotate(r);

if (balance < -1 && ele > r->right->data)
return leftRotate(r);

if (balance > 1 && ele > r->left->data) {
r->left = leftRotate(r->left);
return rightRotate(r);
}

if (balance < -1 && ele < r->right->data) {
r->right = rightRotate(r->right);
return leftRotate(r);
}

return r;
}

struct node* findmin(struct node* r) {
if(r==NULL)
return NULL;
else if(r->left!=NULL)
findmin(r->left);
else
return r;
}

struct node* deletenode(struct node* r, int ele) {
struct node *temp;
if(r==NULL)
return r;
else if(ele<r->data)
r->left=deletenode(r->left,ele);
else if(ele>r->data)
r->right=deletenode(r->right,ele);
else
{

if(r->left!=NULL&&r->right!=NULL)
{
temp=findmin(r->right);
r->data=temp->data;
r->right=deletenode(r->right,temp->data);
}
else
{
temp=r;
if(r->left==NULL)
r=r->right;
else if(r->right==NULL)
r=r->left;
else
free(temp);
}
}
if(r==NULL)
return r;
r->height = 1 + max(height(r->left), height(r->right));

int balance = getBalance(r);

if (balance > 1 && getBalance(r->left) >= 0)
return rightRotate(r);

if (balance > 1 && getBalance(r->left) < 0) {
r->left = leftRotate(r->left);
return rightRotate(r);
}

if (balance < -1 && getBalance(r->right) <= 0)
return leftRotate(r);

if (balance < -1 && getBalance(r->right) > 0) {
r->right = rightRotate(r->right);
return leftRotate(r);
}
return r;
}

void inOrderTraversal(struct node* r) {
if (r != NULL) {
inOrderTraversal(r->left);
printf("%d ", r->data);
inOrderTraversal(r->right);
}
}

void main() {
struct node* root = NULL;
int ch, ele;
do {
printf("\nAVL Tree Operations:\n");
printf("1. Insert a node\n");
printf("2. Delete a node\n");
printf("3. In-order Traversal\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &ch);
switch (ch) {
case 1:
printf("Enter the element to insert: ");
scanf("%d", &ele);
root = insert(root, ele);
break;
case 2:
printf("Enter the element to delete: ");
scanf("%d", &ele);
root = deletenode(root, ele);
break;
case 3:
printf("In-order Traversal: ");
inOrderTraversal(root);
printf("\n");
break;
case 4:
exit(0);
break;
default:
printf("Invalid choice! Please enter a valid option.\n");
}
} while (ch != 4);

}
